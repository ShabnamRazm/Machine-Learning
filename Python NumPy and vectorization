import numpy as np    # it is an unofficial standard to use np for numpy
import time

# NumPy is a library that extends the base capabilities of python to add a richer data set including more numeric types, vectors, matrices, and many matrix functions.

#Data creation routines in NumPy will generally have a first parameter which is the shape of the object. This can either be a single value for a 1-D result or a tuple (n,m,...) specifying the shape of the result.
#Below are examples of creating vectors using these routines.

a = np.zeros(4);                print(f"np.zeros(4) :   a = {a}, a shape = {a.shape}, a data type = {a.dtype}")
a = np.zeros((4,));             print(f"np.zeros(4,) :  a = {a}, a shape = {a.shape}, a data type = {a.dtype}")
a = np.random.random_sample(4); print(f"np.random.random_sample(4): a = {a}, a shape = {a.shape}, a data type = {a.dtype}")
# NumPy routines which allocate memory and fill arrays with value
a = np.zeros(4);                print(f"np.zeros(4) :   a = {a}, a shape = {a.shape}, a data type = {a.dtype}")
#np.zeros(4) :   a = [0. 0. 0. 0.], a shape = (4,), a data type = float64
a = np.zeros((4,));             print(f"np.zeros(4,) :  a = {a}, a shape = {a.shape}, a data type = {a.dtype}")
#np.zeros(4,) :  a = [0. 0. 0. 0.], a shape = (4,), a data type = float64
a = np.random.random_sample(4); print(f"np.random.random_sample(4): a = {a}, a shape = {a.shape}, a data type = {a.dtype}")
#np.random.random_sample(4): a = [0.74031266 0.34090711 0.65779692 0.36012241], a shape = (4,), a data type = float64

#Some data creation routines do not take a shape tuple:
# NumPy routines which allocate memory and fill arrays with value but do not accept shape as input argument
a = np.arange(4.);              print(f"np.arange(4.):     a = {a}, a shape = {a.shape}, a data type = {a.dtype}")
a = np.random.rand(4);          print(f"np.random.rand(4): a = {a}, a shape = {a.shape}, a data type = {a.dtype}")
#np.arange(4.):     a = [0. 1. 2. 3.], a shape = (4,), a data type = float64
#np.random.rand(4): a = [0.16506311 0.77370925 0.14719161 0.37297085], a shape = (4,), a data type = float64

#values can be specified manually as well.
# NumPy routines which allocate memory and fill with user specified values
a = np.array([5,4,3,2]);  print(f"np.array([5,4,3,2]):  a = {a},     a shape = {a.shape}, a data type = {a.dtype}")
a = np.array([5.,4,3,2]); print(f"np.array([5.,4,3,2]): a = {a}, a shape = {a.shape}, a data type = {a.dtype}")
#np.array([5,4,3,2]):  a = [5 4 3 2],     a shape = (4,), a data type = int32
#np.array([5.,4,3,2]): a = [5. 4. 3. 2.], a shape = (4,), a data type = float64
#These have all created a one-dimensional vector a with four elements. a.shape returns the dimensions. Here we see a.shape = (4,) indicating a 1-d array with 4 elements.
#vector indexing operations on 1-D vectors
a = np.arange(10)
print(a)
#[0 1 2 3 4 5 6 7 8 9]

#access an element
print(f"a[2].shape: {a[2].shape} a[2]  = {a[2]}, Accessing an element returns a scalar")
#a[2].shape: () a[2]  = 2, Accessing an element returns a scalar

# access the last element, negative indexes count from the end
print(f"a[-1] = {a[-1]}")
#a[-1] = 9

#indexs must be within the range of the vector or they will produce and error
try:
    c = a[10]
except Exception as e:
    print("The error message you'll see is:")
    print(e)
#The error message you'll see is:
#index 10 is out of bounds for axis 0 with size 10

#Slicing creates an array of indices using a set of three values (start:stop:step). A subset of values is also valid. Its use is best explained by example:
#vector slicing operations
a = np.arange(10)
print(f"a         = {a}")                      #a         = [0 1 2 3 4 5 6 7 8 9]

#access 5 consecutive elements (start:stop:step)
c = a[2:7:1];     print("a[2:7:1] = ", c)      #a[2:7:1] =  [2 3 4 5 6]

# access 3 elements separated by two 
c = a[2:7:2];     print("a[2:7:2] = ", c)      #a[2:7:2] =  [2 4 6]

# access all elements index 3 and above
c = a[3:];        print("a[3:]    = ", c)      #a[3:]    =  [3 4 5 6 7 8 9]

# access all elements below index 3
c = a[:3];        print("a[:3]    = ", c)      #a[:3]    =  [0 1 2]

# access all elements
c = a[:];         print("a[:]     = ", c)      #a[:]     =  [0 1 2 3 4 5 6 7 8 9]

#There are a number of useful operations that involve operations on a single vector.
a = np.array([1,2,3,4])
print(f"a             : {a}")        #a             : [1 2 3 4]
# negate elements of a
b = -a 
print(f"b = -a        : {b}")        #b = -a        : [-1 -2 -3 -4]

# sum all elements of a, returns a scalar
b = np.sum(a) 
print(f"b = np.sum(a) : {b}")        #b = np.sum(a) : 10

b = np.mean(a)
print(f"b = np.mean(a): {b}")        #b = np.mean(a): 2.5

b = a**2
print(f"b = a**2      : {b}")        #b = a**2      : [ 1  4  9 16]

#Most of the NumPy arithmetic, logical and comparison operations apply to vectors as well. These operators work on an element-by-element basis. For example:    ùëêùëñ=ùëéùëñ+ùëèùëñ
a = np.array([ 1, 2, 3, 4])
b = np.array([-1,-2, 3, 4])
print(f"Binary operators work element wise: {a + b}")    #Binary operators work element wise: [0 0 6 8]
#Of course, for this to work correctly, the vectors must be of the same size:
#try a mismatched vector operation
c = np.array([1, 2])
try:
    d = a + c
except Exception as e:
    print("The error message you'll see is:")
    print(e)     
#The error message you'll see is:
#operands could not be broadcast together with shapes (4,) (2,)

#Vectors can be 'scaled' by scalar values. A scalar value is just a number. The scalar multiplies all the elements of the vector.
a = np.array([1, 2, 3, 4])

# multiply a by a scalar
b = 5 * a 
print(f"b = 5 * a : {b}")      #b = 5 * a : [ 5 10 15 20]

#The dot product is a mainstay of Linear Algebra and NumPy
#The dot product multiplies the values in two vectors element-wise and then sums the result. Vector dot product requires the dimensions of the two vectors to be the same.

#Assume both a and b are the same shape.
def my_dot(a, b): 
    """
   Compute the dot product of two vectors
 
    Args:
      a (ndarray (n,)):  input vector 
      b (ndarray (n,)):  input vector with same dimension as a
    
    Returns:
      x (scalar): 
    """
    x=0
    for i in range(a.shape[0]):
        x = x + a[i] * b[i]
    return x
# test 1-D
a = np.array([1, 2, 3, 4])
b = np.array([-1, 4, 3, 2])
print(f"my_dot(a, b) = {my_dot(a, b)}")    #my_dot(a, b) = 24

#Note, the dot product is expected to return a scalar value.
#Let's try the same operations using np.dot
# test 1-D
a = np.array([1, 2, 3, 4])
b = np.array([-1, 4, 3, 2])
c = np.dot(a, b)
print(f"NumPy 1-D np.dot(a, b) = {c}, np.dot(a, b).shape = {c.shape} ")       #NumPy 1-D np.dot(a, b) = 24, np.dot(a, b).shape = () 
c = np.dot(b, a)
print(f"NumPy 1-D np.dot(b, a) = {c}, np.dot(a, b).shape = {c.shape} ")       #NumPy 1-D np.dot(b, a) = 24, np.dot(a, b).shape = () 
#Above, you will note that the results for 1-D matched our implementation.

#We utilized the NumPy library because it improves speed memory efficiency. Let's demonstrate:
np.random.seed(1)
a = np.random.rand(10000000)  # very large arrays
b = np.random.rand(10000000)

tic = time.time()  # capture start time
c = np.dot(a, b)
toc = time.time()  # capture end time

print(f"np.dot(a, b) =  {c:.4f}")                                    #np.dot(a, b) =  2501072.5817
print(f"Vectorized version duration: {1000*(toc-tic):.4f} ms ")      #Vectorized version duration: 17.1995 ms

tic = time.time()  # capture start time
c = my_dot(a,b)
toc = time.time()  # capture end time

print(f"my_dot(a, b) =  {c:.4f}")                                    #my_dot(a, b) =  2501072.5817
print(f"loop version duration: {1000*(toc-tic):.4f} ms ")            #loop version duration: 5731.0421 ms

del(a);del(b)  #remove these big arrays from memory

#So, vectorization provides a large speed up in this example. This is because NumPy makes better use of available data parallelism in the underlying hardware.
#GPU's and modern CPU's implement Single Instruction, Multiple Data (SIMD) pipelines allowing multiple operations to be issued in parallel.
#This is critical in Machine Learning where the data sets are often very large.

#Vector Vector operations will appear frequently in course 1. Here is why:
#Going forward, our examples will be stored in an array, X_train of dimension (m,n). This will be explained more in context, but here it is important to note it is a 2 Dimensional array or matrix (see next section on matrices).
#w will be a 1-dimensional vector of shape (n,).
#we will perform operations by looping through the examples, extracting each example to work on individually by indexing X. For example:X[i]
#X[i] returns a value of shape (n,), a 1-dimensional vector. Consequently, operations involving X[i] are often vector-vector.
#That is a somewhat lengthy explanation, but aligning and understanding the shapes of your operands is important when performing vector operations.
X = np.array([[1],[2],[3],[4]])
w = np.array([2])
c = np.dot(X[1], w)

print(f"X[1] has shape {X[1].shape}")      #X[1] has shape (1,)
print(f"w has shape {w.shape}")            #w has shape (1,)
print(f"c has shape {c.shape}")            #c has shape ()

#Matrices, are two dimensional arrays. The elements of a matrix are all of the same type.
#Notaion:
#matrices are denoted with capitol, bold letter such as  ùêó
#m is often the number of rows and n the number of columns.
#The elements of a matrix can be referenced with a two dimensional index.


#The same functions that created 1-D vectors will create 2-D or n-D arrays. Here are some examples
#Below, the shape tuple is provided to achieve a 2-D result. Notice how NumPy uses brackets to denote each dimension.
#Notice further than NumPy, when printing, will print one row per line.

a = np.zeros((1, 5))                                       
print(f"a shape = {a.shape}, a = {a}")    #a shape = (1, 5), a = [[0. 0. 0. 0. 0.]]                 

a = np.zeros((2, 1))                                                                   
print(f"a shape = {a.shape}, a = {a}")       #a shape = (2, 1), a = [[0.]
 #[0.]]

a = np.random.random_sample((1, 1))  
print(f"a shape = {a.shape}, a = {a}")       #a shape = (1, 1), a = [[0.33380882]]

# NumPy routines which allocate memory and fill with user specified values
a = np.array([[5], [4], [3]]);   print(f" a shape = {a.shape}, np.array: a = {a}")      # a shape = (3, 1), np.array: a = [[5]
 #[4]
 #[3]]
a = np.array([[5],   # One can also
              [4],   # separate values
              [3]]); #into separate rows
print(f" a shape = {a.shape}, np.array: a = {a}")      # a shape = (3, 1), np.array: a = [[5]
 #[4]
 #[3]]

#Matrices include a second index. The two indexes describe [row, column]. Access can either return an element or a row/column. See below:
#vector indexing operations on matrices
a = np.arange(6).reshape(-1, 2)   #reshape is a convenient way to create matrices
print(f"a.shape: {a.shape}, \na= {a}")
#a.shape: (3, 2), 
#a= [[0 1]
# [2 3]
# [4 5]]
#access an element
print(f"\na[2,0].shape:   {a[2, 0].shape}, a[2,0] = {a[2, 0]},     type(a[2,0]) = {type(a[2, 0])} Accessing an element returns a scalar\n")
#a[2,0].shape:   (), a[2,0] = 4,     type(a[2,0]) = <class 'numpy.int32'> Accessing an element returns a scalar
#access a row
print(f"a[2].shape:   {a[2].shape}, a[2]   = {a[2]}, type(a[2])   = {type(a[2])}")
#a[2].shape:   (2,), a[2]   = [4 5], type(a[2])   = <class 'numpy.ndarray'>

#Reshape
#The previous example used reshape to shape the array.
#a = np.arange(6).reshape(-1, 2)
#This line of code first created a 1-D Vector of six elements. It then reshaped that vector into a 2-D array using the reshape command. This could have been written:
#a = np.arange(6).reshape(3, 2)
#To arrive at the same 3 row, 2 column array. The -1 argument tells the routine to compute the number of rows given the size of the array and the number of columns.

#Slicing creates an array of indices using a set of three values (start:stop:step). A subset of values is also valid. Its use is best explained by example:
#vector 2-D slicing operations
a = np.arange(20).reshape(-1, 10)
print(f"a = \n{a}")
#a = 
#[[ 0  1  2  3  4  5  6  7  8  9]
# [10 11 12 13 14 15 16 17 18 19]]

#access 5 consecutive elements (start:stop:step)
print("a[0, 2:7:1] = ", a[0, 2:7:1], ",  a[0, 2:7:1].shape =", a[0, 2:7:1].shape, "a 1-D array")
# selects elements in the first row from index 2 to 6 (exclusive) with a step of 1:
#a[0, 2:7:1] =  [2 3 4 5 6] ,  a[0, 2:7:1].shape = (5,) a 1-D array

#access 5 consecutive elements (start:stop:step) in two rows
print("a[:, 2:7:1] = \n", a[:, 2:7:1], ",  a[:, 2:7:1].shape =", a[:, 2:7:1].shape, "a 2-D array")
# selects elements in all rows from column index 2 to 6 (exclusive) with a step of 1:
# a[:, 2:7:1] = 
# [[ 2  3  4  5  6]
# [12 13 14 15 16]] ,  a[:, 2:7:1].shape = (2, 5) a 2-D array

# access all elements
print("a[:,:] = \n", a[:,:], ",  a[:,:].shape =", a[:,:].shape)
# selects all elements in the entire matrix:
#a[:,:] = 
# [[ 0  1  2  3  4  5  6  7  8  9]
# [10 11 12 13 14 15 16 17 18 19]] ,  a[:,:].shape = (2, 10)

# access all elements in one row (very common usage)
print("a[1,:] = ", a[1,:], ",  a[1,:].shape =", a[1,:].shape, "a 1-D array")
#selects all elements in the second row, resulting in a 1D array:
#a[1,:] =  [10 11 12 13 14 15 16 17 18 19] ,  a[1,:].shape = (10,) a 1-D array

# same as
print("a[1]   = ", a[1],   ",  a[1].shape   =", a[1].shape, "a 1-D array")
#This is an alternative way to access all elements in the second row, using a simplified syntax.
#a[1]   =  [10 11 12 13 14 15 16 17 18 19] ,  a[1].shape   = (10,) a 1-D array


