#Learn to implement the model  𝑓𝑤,𝑏 for linear regression with one variable
#NOTATION:
# a  scalar, non bold
# a  vector, bold
# Regression
# x    Training Example feature values (in this lab - Size (1000 sqft))	    x_train
# y    Training Example targets (in this lab Price (1000s of dollars))		  y_train
# 𝑥(𝑖) ,  𝑦(𝑖)    𝑖𝑡ℎ Training Example    x_i, y_i
# m  Number of training examples	  m
# w   parameter: weight  w
# b    parameter: bias   b
# 𝑓𝑤,𝑏(𝑥(𝑖))  The result of the model evaluation at  𝑥(𝑖) parameterized by  𝑤,𝑏:  𝑓𝑤,𝑏(𝑥(𝑖))=𝑤𝑥(𝑖)+𝑏    f_wb

# NumPy, a popular library for scientific computing
# Matplotlib, a popular library for plotting data
import numpy as np
import matplotlib.pyplot as plt
plt.style.use('./deeplearning.mplstyle')  #plt.style.use('C:\\Users\\Admin\\Desktop\\APPLY\\Python\\New folder (2)\\deeplearning.mplstyle')

# This lab will use a simple data set with only two data points - a house with 1000 square feet(sqft) sold for $300,000 and a house with 2000 square feet sold for $500,000.
# These two points will constitute our data or training set. In this lab, the units of size are 1000 sqft and the units of price are 1000s of dollars.
# You would like to fit a linear regression model (shown above as the blue straight line) through these two points, so you can then predict price for other houses - say, a house with 1200 sqft.
#Please run the following code cell to create your x_train and y_train variables. The data is stored in one-dimensional NumPy arrays.
# x_train is the input variable (size in 1000 square feet)
# y_train is the target (price in 1000s of dollars)
x_train=np.array([1.0,2.0])
y_train=np.array([300.0,500.0])
print(f"x_train = {x_train}")
print(f"y_train = {y_train}")
#You will use m to denote the number of training examples.
#Numpy arrays have a .shape parameter. x_train.shape returns a python tuple with an entry for each dimension.
# x_train.shape[0] is the length of the array and number of examples as shown below.

# m is the number of training examples
print(f'x_train.shape: {x_train.shape}')
m=x_train.shape[0]
print(f"Number of training examples is: {m}")

# One can also use the Python len() function as shown below.
# m is the number of training examples
m = len(x_train)
print(f"Number of training examples is: {m}")
# Yo will use (x (𝑖), y (𝑖)) to denote the  𝑖𝑡ℎ
  training example.
